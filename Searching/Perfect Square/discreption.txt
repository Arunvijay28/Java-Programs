1. Brute Force Approach

This approach involves checking every integer from 0 to the number to see if squaring that integer gives the original number.

Code for Brute Force Approach:
##java

public class CheckPerfectSquareBruteForce {
    // Brute force method to check if a number is a perfect square
    static boolean checkPerfectSquareBruteForce(int number) {
        if (number < 0) return false; // Negative numbers cannot be perfect squares
        for (int i = 0; i <= number; i++) {
            if (i * i == number) {
                return true; // Found a perfect square
            }
        }
        return false; // No perfect square found
    }

    public static void main(String[] args) {
        int number = 16; // Example input
        if (checkPerfectSquareBruteForce(number)) {
            System.out.println("Yes, the given number is a perfect square.");
        } else {
            System.out.println("No, the given number is not a perfect square.");
        }
    }
}


Explanation of Brute Force Approach:

Time Complexity: O(n), where n is the input number. The loop runs up to the input number.

It checks every integer from 0 up to the number to see if squaring that integer equals the input number.


2. Best Case Approach

The best-case approach leverages the mathematical property that only integers up to the square root of the number need to be checked. If 𝑛
is a perfect square, then there exists an integer x such that x^2 = n. Hence, you only need to check integers from 0 to √n.

Code for Best Case Approach:
##java


public class CheckPerfectSquareBestCase {
    // Best case method to check if a number is a perfect square
    static boolean checkPerfectSquareBestCase(int number) {
        if (number < 0) return false; // Negative numbers cannot be perfect squares
        int sqrt = (int) Math.sqrt(number); // Calculate integer square root
        return (sqrt * sqrt == number); // Check if the square of sqrt equals the number
    }

    public static void main(String[] args) {
        int number = 16; // Example input
        if (checkPerfectSquareBestCase(number)) {
            System.out.println("Yes, the given number is a perfect square.");
        } else {
            System.out.println("No, the given number is not a perfect square.");
        }
    }
}


Explanation of Best Case Approach:

Time Complexity: O(1), as it performs a constant number of operations regardless of the input size after calculating the square root.

It calculates the integer square root and checks if squaring that result gives back the original number.

Summary:

The brute force approach checks every integer up to the number itself, which is inefficient for larger numbers.

The best case approach efficiently uses the property of square roots, drastically reducing the number of checks needed, especially for larger inputs
